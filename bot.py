from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, CallbackContext, MessageHandler, filters
import json
import os
import logging

# –§–∞–π–ª –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
USER_DATA_FILE = "user_data.json"

# –¢–≤–æ–π ID –≤ Telegram –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
ADMIN_ID = "7863333069"  # –ó–∞–º–µ–Ω–∏ –Ω–∞ —Å–≤–æ–π ID

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO)
logger = logging.getLogger(__name__)

# –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
def load_user_data():
    if os.path.exists(USER_DATA_FILE):
        with open(USER_DATA_FILE, "r") as file:
            return json.load(file)
    return {}

# –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
def save_user_data(data):
    with open(USER_DATA_FILE, "w") as file:
        json.dump(data, file, indent=4)

# –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å –∫–Ω–æ–ø–∫–∞–º–∏
def create_keyboard():
    keyboard = [
        [InlineKeyboardButton("üìå –ó–∞—Ä–∞–±–æ—Ç–∞—Ç—å –∑–≤—ë–∑–¥—ã", callback_data='earn_stars')],
        [InlineKeyboardButton("üìÖ –í—ã–≤–µ—Å—Ç–∏ –∑–≤—ë–∑–¥—ã", callback_data='withdraw_stars')],
        [InlineKeyboardButton("üìÑ –ó–∞–¥–∞–Ω–∏—è", callback_data='tasks')],
        [InlineKeyboardButton("üìÖ –ë–æ–Ω—É—Å", callback_data='bonus')],
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='back')]
    ]
    return InlineKeyboardMarkup(keyboard)

# –ö–æ–º–∞–Ω–¥–∞ /start
async def start(update: Update, context: CallbackContext) -> None:
    user_id = str(update.message.from_user.id)
    user_data = load_user_data()

    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–æ–≤—ã–π, –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ –≤ –±–∞–∑—É
    if user_id not in user_data:
        user_data[user_id] = {"stars": 0, "referrals": []}
        save_user_data(user_data)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏
    await update.message.reply_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=create_keyboard()
    )

# –ö–æ–º–∞–Ω–¥–∞ /help
async def help_command(update: Update, context: CallbackContext) -> None:
    await update.message.reply_text(
        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /start –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã —Å –±–æ—Ç–æ–º."
    )

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏
async def button_handler(update: Update, context: CallbackContext) -> None:
    query = update.callback_query
    await query.answer()

    user_id = str(query.from_user.id)
    user_data = load_user_data()

    if query.data == 'earn_stars':
        await query.edit_message_text(
            text="üìå –í–æ—Ç —Å–ø–æ—Å–æ–±—ã –∑–∞—Ä–∞–±–æ—Ç–∞—Ç—å –∑–≤—ë–∑–¥—ã:\n\n"
                 "1. –ü—Ä–∏–≥–ª–∞—Å–∏ –¥—Ä—É–∑–µ–π: +3 –∑–≤–µ–∑–¥—ã –∑–∞ –∫–∞–∂–¥–æ–≥–æ.\n"
                 "2. –í—ã–ø–æ–ª–Ω—è–π –∑–∞–¥–∞–Ω–∏—è: —Å–º–æ—Ç—Ä–∏ —Ä–µ–∫–ª–∞–º—É, –ø—Ä–æ—Ö–æ–¥–∏ –æ–ø—Ä–æ—Å—ã.\n"
                 "3. –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –±–æ–Ω—É—Å: +1 –∑–≤–µ–∑–¥–∞ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å.",
            reply_markup=create_keyboard()
        )
    elif query.data == 'withdraw_stars':
        if user_data.get(user_id, {}).get("stars", 0) >= 10:
            await query.edit_message_text(
                text=f"üìÖ –¢–≤–æ–π –±–∞–ª–∞–Ω—Å: {user_data[user_id]['stars']} –∑–≤—ë–∑–¥.\n"
                      "–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–ª—è –≤—ã–≤–æ–¥–∞ (–º–∏–Ω–∏–º—É–º 10 –∑–≤—ë–∑–¥):"
            )
            context.user_data["awaiting_withdrawal"] = True
        else:
            await query.edit_message_text(
                text="‚ùå –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞ ‚Äî 10 –∑–≤—ë–∑–¥. –ü—Ä–æ–¥–æ–ª–∂–∞–π –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å!",
                reply_markup=create_keyboard()
            )
    elif query.data == 'tasks':
        await query.edit_message_text(
            text="üìÑ –°–ø–∏—Å–æ–∫ –∑–∞–¥–∞–Ω–∏–π:\n\n"
                 "1. –ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å –¥—Ä—É–≥–∞: +3 –∑–≤–µ–∑–¥—ã.\n"
                 "2. –°–º–æ—Ç—Ä–µ—Ç—å —Ä–µ–∫–ª–∞–º—É: +3 –∑–≤–µ–∑–¥—ã.\n"
                 "3. –ü—Ä–æ–π—Ç–∏ –æ–ø—Ä–æ—Å: +2 –∑–≤–µ–∑–¥—ã.",
            reply_markup=create_keyboard()
        )
    elif query.data == 'bonus':
        user_data[user_id]["stars"] += 1
        save_user_data(user_data)
        await query.edit_message_text(
            text="üéâ –¢—ã –ø–æ–ª—É—á–∏–ª –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –±–æ–Ω—É—Å: +1 –∑–≤–µ–∑–¥–∞!",
            reply_markup=create_keyboard()
        )
    elif query.data == 'back':
        await query.edit_message_text(
            text="–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:",
            reply_markup=create_keyboard()
        )

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (–¥–ª—è –≤—ã–≤–æ–¥–∞ –∑–≤—ë–∑–¥)
async def handle_message(update: Update, context: CallbackContext) -> None:
    user_id = str(update.message.from_user.id)
    user_data = load_user_data()

    if context.user_data.get("awaiting_withdrawal"):
        try:
            amount = int(update.message.text)
            if amount < 10:
                await update.message.reply_text("‚ùå –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞ ‚Äî 10 –∑–≤—ë–∑–¥.")
            elif amount > user_data.get(user_id, {}).get("stars", 0):
                await update.message.reply_text("‚ùå –£ —Ç–µ–±—è –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∑–≤—ë–∑–¥.")
            else:
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞—è–≤–∫—É –∞–¥–º–∏–Ω—É (—Ç–µ–±–µ)
                await context.bot.send_message(
                    chat_id=ADMIN_ID,
                    text=f"üö® –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ –≤—ã–≤–æ–¥:\n\n"
                         f"ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user_id}\n"
                         f"–°—É–º–º–∞: {amount} –∑–≤—ë–∑–¥\n\n"
                         f"–ü–æ–¥—Ç–≤–µ—Ä–¥–∏ –∏–ª–∏ –æ—Ç–∫–ª–æ–Ω–∏ –∑–∞—è–≤–∫—É."
                )
                await update.message.reply_text(
                    "‚úÖ –ó–∞—è–≤–∫–∞ –Ω–∞ –≤—ã–≤–æ–¥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞. –û–∂–∏–¥–∞–π –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.",
                    reply_markup=create_keyboard()
                )
                user_data[user_id]["stars"] -= amount
                save_user_data(user_data)
                context.user_data["awaiting_withdrawal"] = False
        except ValueError:
            await update.message.reply_text("‚ùå –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.")
    else:
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å –±–æ—Ç–æ–º.")

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
async def main() -> None:
    # –í—Å—Ç–∞–≤—å —Å—é–¥–∞ —Å–≤–æ–π —Ç–æ–∫–µ–Ω
    application = Application.builder().7796947947:AAECkkEDnYm7yNclc2v-5XdxOaQvpXL84Mo").build()

    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∫–æ–º–∞–Ω–¥
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("help", help_command))
    application.add_handler(CallbackQueryHandler(button_handler))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))

    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    await application.run_polling()

if __name__ == '__main__':
    import asyncio
    asyncio.run(main())